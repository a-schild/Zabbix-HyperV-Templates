zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: 0b4d87047ee14edb98a87b309ee5a803
      name: 'HyperV VM'
    - uuid: 7df96b18c230490a9a0a9e2307226338
      name: Templates
    - uuid: aea23489ce3a49b6806ebb28e0cda430
      name: Windows
  templates:
    - uuid: 553c9735a18645849c38ebda859ace9c
      template: 'Template Windows HyperV VM Guest 2'
      name: 'Template Windows HyperV VM Guest 2'
      description: 'Child template, to create new Hyper-V VM monitoring from the "Template Windows HyperV Host 2" template'
      groups:
        - name: 'HyperV VM'
        - name: Templates
        - name: Windows
      items:
        - uuid: 60a505b652f24034b5b0d1903a85ea8e
          name: 'Hyper-V VM disk master data'
          key: 'hyperv.discover.disks[{#VMNAME_SAFE}]'
          delay: 59m
          value_type: TEXT
          trends: '0'
          description: |
            Master item containing all counter discovery data for dependent items
            
            Needs to be passive agent, as the request must be processed by the Hyper-V server itself and not the VM
          timeout: 30s
        - uuid: 77b70fa1ac3b41259978c203f4ac34f0
          name: 'Hyper-V VM master data'
          key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
          delay: 10m
          value_type: TEXT
          trends: '0'
          description: |
            Fetch details of VM {$VM.ID}
            Used for LLD
            Contains VM details as well as disks and nic informations
            
            Needs to be Zabbix agent in passive mode, since the request is sent to the Hyper-V server
          timeout: 30s
        - uuid: 823f8e1df92a4276af7188394af21a38
          name: 'Hyper-V VM counters master data'
          key: 'hyperv.vm.counters[{HOST.HOST}]'
          delay: 5m
          value_type: TEXT
          trends: '0'
          description: |
            Master item containing all counter discovery data for dependent items
            
            Needs to be passive agent, as the request must be processed by the Hyper-V server itself and not the VM
          timeout: 30s
      discovery_rules:
        - uuid: 25c88644de4841ef9a1d3c9af160789d
          name: 'Disc discovery'
          type: DEPENDENT
          key: hyperv.discovery.vmdisks
          delay: '0'
          item_prototypes:
            - uuid: 5dfe8acd7e2743059b08fad24c5b8c4f
              name: 'Disk {#DISK.ID} max size'
              type: DEPENDENT
              key: 'hyperv.vm.disc[{#DISK.ID},maxsize]'
              delay: '0'
              description: '{#DISK.PATH}'
              master_item:
                key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
            - uuid: f09400bc46514839b340071d5a71bf3e
              name: 'Disk {#DISK.ID} current size'
              type: DEPENDENT
              key: 'hyperv.vm.disc[{#DISK.ID},size]'
              delay: '0'
              description: '{#DISK.PATH}'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["{#DISK.SIZE}"]'
              master_item:
                key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
          graph_prototypes:
            - uuid: 19fdfcc72b234112a80b751e5d3d1352
              name: 'Disk size {#DISK.ID}'
              ymin_type_1: FIXED
              ymax_type_1: ITEM
              ymax_item_1:
                host: 'Template Windows HyperV VM Guest 2'
                key: 'hyperv.vm.disc[{#DISK.ID},maxsize]'
              graph_items:
                - drawtype: BOLD_LINE
                  color: FF0080
                  calc_fnc: ALL
                  item:
                    host: 'Template Windows HyperV VM Guest 2'
                    key: 'hyperv.vm.disc[{#DISK.ID},maxsize]'
                - sortorder: '1'
                  color: 00FF00
                  calc_fnc: ALL
                  item:
                    host: 'Template Windows HyperV VM Guest 2'
                    key: 'hyperv.vm.disc[{#DISK.ID},size]'
          master_item:
            key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
          lld_macro_paths:
            - lld_macro: '{#DISK.CONTROLLER}'
              path: '$["{#DISK.CONTROLLER}"]'
            - lld_macro: '{#DISK.FILE.SIZE.GB}'
              path: '$["{#DISK.FILE.SIZE.GB}"]'
            - lld_macro: '{#DISK.FRAGMENTATION}'
              path: '$["{#DISK.FRAGMENTATION}"]'
            - lld_macro: '{#DISK.ID}'
              path: '$["{#DISK.ID}"]'
            - lld_macro: '{#DISK.MINIMUM.SIZE.GB}'
              path: '$["{#DISK.MINIMUM.SIZE.GB}"]'
            - lld_macro: '{#DISK.PATH}'
              path: '$["{#DISK.PATH}"]'
            - lld_macro: '{#DISK.SIZE.GB}'
              path: '$["{#DISK.SIZE.GB}"]'
            - lld_macro: '{#DISK.VHD.FORMAT}'
              path: '$["{#DISK.VHD.FORMAT}"]'
            - lld_macro: '{#DISK.VHD.TYPE}'
              path: '$["{#DISK.VHD.TYPE}"]'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$["disks"]'
        - uuid: f88de644e4f34b72be0b4ad9ed31d27e
          name: 'VM Disks Discovery'
          type: DEPENDENT
          key: hyperv.vm.disks.discovery
          delay: '0'
          description: 'Discovers VM disks from vmdetails master data'
          item_prototypes:
            - uuid: b2c3d4e5f67849abb0123456789abcdf
              name: 'VM Disk {#DISK.ID} - File Size'
              type: DEPENDENT
              key: 'hyperv.vm.disk.filesize[{#DISK.ID}]'
              delay: '0'
              units: GB
              description: 'Actual file size of disk {#DISK.ID} at {#DISK.PATH}'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      var data = JSON.parse(value);
                      var diskId = "{#DISK.ID}";

                      // Debug: Return info about what we found
                      if (!data.disks || data.disks.length === 0) {
                        throw "ZBX_UNSUPPORTED: No disks array found";
                      }

                      for (var i = 0; i < data.disks.length; i++) {
                        var disk = data.disks[i];
                        if (disk["{#DISK.ID}"] === diskId) {
                          var fileSize = disk["{#DISK.FILE.SIZE.GB}"];
                          if (!fileSize) {
                            throw "ZBX_UNSUPPORTED: Field {#DISK.FILE.SIZE.GB} not found or empty";
                          }
                          return fileSize;
                        }
                      }

                      // Debug: Show what disk IDs we found
                      var foundIds = [];
                      for (var i = 0; i < data.disks.length; i++) {
                        foundIds.push(data.disks[i]["{#DISK.ID}"]);
                      }
                      throw "ZBX_UNSUPPORTED: Disk ID '" + diskId + "' not found. Found: " + foundIds.join(", ");
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
            - uuid: d4e5f67890ab4cde90123456789abce1
              name: 'VM Disk {#DISK.ID} - Fragmentation'
              type: DEPENDENT
              key: 'hyperv.vm.disk.fragmentation[{#DISK.ID}]'
              delay: '0'
              units: '%'
              description: 'Fragmentation percentage of disk {#DISK.ID} at {#DISK.PATH}'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      var data = JSON.parse(value);
                      var diskId = "{#DISK.ID}";
                      for (var i = 0; i < data.disks.length; i++) {
                        if (data.disks[i]["{#DISK.ID}"] === diskId) {
                          return data.disks[i]["{#DISK.FRAGMENTATION}"];
                        }
                      }
                      return "0";
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
            - uuid: c3d4e5f678904abca0123456789abce0
              name: 'VM Disk {#DISK.ID} - Minimum Size'
              type: DEPENDENT
              key: 'hyperv.vm.disk.minsize[{#DISK.ID}]'
              delay: '0'
              units: GB
              description: 'Minimum size of disk {#DISK.ID} at {#DISK.PATH}'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      var data = JSON.parse(value);
                      var diskId = "{#DISK.ID}";
                      for (var i = 0; i < data.disks.length; i++) {
                        if (data.disks[i]["{#DISK.ID}"] === diskId) {
                          return data.disks[i]["{#DISK.MINIMUM.SIZE.GB}"];
                        }
                      }
                      return "0";
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
            - uuid: a1b2c3d4e5f64789a0123456789abcde
              name: 'VM Disk {#DISK.ID} - Size'
              type: DEPENDENT
              key: 'hyperv.vm.disk.size[{#DISK.ID}]'
              delay: '0'
              units: GB
              description: 'Current size of disk {#DISK.ID} at {#DISK.PATH}'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      var data = JSON.parse(value);
                      var diskId = "{#DISK.ID}";
                      for (var i = 0; i < data.disks.length; i++) {
                        if (data.disks[i]["{#DISK.ID}"] === diskId) {
                          return data.disks[i]["{#DISK.SIZE.GB}"];
                        }
                      }
                      return "0";
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
            - uuid: e1f234567890472d9f0123456789abc0
              name: 'VM Disk {#DISK.ID} - Read Bytes/sec'
              key: 'perf_counter_en["\Hyper-V Virtual Storage Device({#DISK.ID})\Read Bytes/sec"]'
              delay: 1m
              value_type: FLOAT
              units: Bps
              description: 'Disk read throughput for {#DISK.ID} at {#DISK.PATH}'
              timeout: 30s
            - uuid: f2345678abcd4f0183456789abc01234
              name: 'VM Disk {#DISK.ID} - Write Bytes/sec'
              key: 'perf_counter_en["\Hyper-V Virtual Storage Device({#DISK.ID})\Write Bytes/sec"]'
              delay: 1m
              value_type: FLOAT
              units: Bps
              description: 'Disk write throughput for {#DISK.ID} at {#DISK.PATH}'
              timeout: 30s
            - uuid: 03456789abcd4f018456789abc012345
              name: 'VM Disk {#DISK.ID} - Read Operations/sec'
              key: 'perf_counter_en["\Hyper-V Virtual Storage Device({#DISK.ID})\Read Operations/sec"]'
              delay: 1m
              value_type: FLOAT
              units: ops
              description: 'Disk read IOPS for {#DISK.ID} at {#DISK.PATH}'
              timeout: 30s
            - uuid: 14567890abcd4f018567890abc012346
              name: 'VM Disk {#DISK.ID} - Write Operations/sec'
              key: 'perf_counter_en["\Hyper-V Virtual Storage Device({#DISK.ID})\Write Operations/sec"]'
              delay: 1m
              value_type: FLOAT
              units: ops
              description: 'Disk write IOPS for {#DISK.ID} at {#DISK.PATH}'
              timeout: 30s
            - uuid: 25678901abcd4f018678901abc012347
              name: 'VM Disk {#DISK.ID} - Average Read Latency'
              key: 'perf_counter_en["\Hyper-V Virtual Storage Device({#DISK.ID})\Average sec/Read"]'
              delay: 1m
              value_type: FLOAT
              units: s
              description: 'Average disk read latency for {#DISK.ID} at {#DISK.PATH}'
              timeout: 30s
            - uuid: 36789012abcd4f018789012abc012348
              name: 'VM Disk {#DISK.ID} - Average Write Latency'
              key: 'perf_counter_en["\Hyper-V Virtual Storage Device({#DISK.ID})\Average sec/Write"]'
              delay: 1m
              value_type: FLOAT
              units: s
              description: 'Average disk write latency for {#DISK.ID} at {#DISK.PATH}'
              timeout: 30s
          graph_prototypes:
            - uuid: abfaff554baf4f689b9064855f533c8b
              name: 'Disk {#DISK.ID}'
              ymin_type_1: FIXED
              graph_items:
                - color: 1A7C11
                  calc_fnc: ALL
                  item:
                    host: 'Template Windows HyperV VM Guest 2'
                    key: 'hyperv.vm.disk.filesize[{#DISK.ID}]'
                - sortorder: '1'
                  color: '274482'
                  calc_fnc: ALL
                  item:
                    host: 'Template Windows HyperV VM Guest 2'
                    key: 'hyperv.vm.disk.minsize[{#DISK.ID}]'
                - sortorder: '2'
                  color: F63100
                  calc_fnc: ALL
                  item:
                    host: 'Template Windows HyperV VM Guest 2'
                    key: 'hyperv.vm.disk.size[{#DISK.ID}]'
          master_item:
            key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
          lld_macro_paths:
            - lld_macro: '{#DISK.CONTROLLER}'
              path: '$["{#DISK.CONTROLLER}"]'
            - lld_macro: '{#DISK.FILE.SIZE.GB}'
              path: '$["{#DISK.FILE.SIZE.GB}"]'
            - lld_macro: '{#DISK.FRAGMENTATION}'
              path: '$["{#DISK.FRAGMENTATION}"]'
            - lld_macro: '{#DISK.ID}'
              path: '$["{#DISK.ID}"]'
            - lld_macro: '{#DISK.LOCATION}'
              path: '$["{#DISK.LOCATION}"]'
            - lld_macro: '{#DISK.MINIMUM.SIZE.GB}'
              path: '$["{#DISK.MINIMUM.SIZE.GB}"]'
            - lld_macro: '{#DISK.NUMBER}'
              path: '$["{#DISK.NUMBER}"]'
            - lld_macro: '{#DISK.PATH}'
              path: '$["{#DISK.PATH}"]'
            - lld_macro: '{#DISK.SIZE.GB}'
              path: '$["{#DISK.SIZE.GB}"]'
            - lld_macro: '{#DISK.VHD.FORMAT}'
              path: '$["{#DISK.VHD.FORMAT}"]'
            - lld_macro: '{#DISK.VHD.TYPE}'
              path: '$["{#DISK.VHD.TYPE}"]'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$["disks"]'
        - uuid: 253533ec0932452fae14861f85ae1ad5
          name: 'VM Network Adapters Discovery'
          type: DEPENDENT
          key: hyperv.vm.networks.discovery
          delay: '0'
          description: 'Discovers VM network adapters from vmdetails master data'
          item_prototypes:
            - uuid: e5f67890abcd4ef0823456789abcdef2
              name: 'VM Network Adapter {#ADAPTER.NAME} - Connected'
              type: DEPENDENT
              key: 'hyperv.vm.network.connected[{#ADAPTER.ID}]'
              delay: '0'
              description: 'Connection status of network adapter {#ADAPTER.NAME} (ID: {#ADAPTER.ID})'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      var data = JSON.parse(value);
                      var adapterId = "{#ADAPTER.ID}";

                      // Debug: Return info about what we found
                      if (!data.networks || data.networks.length === 0) {
                        throw "ZBX_UNSUPPORTED: No networks array found";
                      }

                      for (var i = 0; i < data.networks.length; i++) {
                        var adapter = data.networks[i];
                        if (adapter["{#ADAPTER.ID}"] === adapterId) {
                          var connected = adapter["{#ADAPTER.CONNECTED}"];
                          if (!connected) {
                            throw "ZBX_UNSUPPORTED: Field {#ADAPTER.CONNECTED} not found or empty";
                          }
                          return connected;
                        }
                      }

                      // Debug: Show what adapter IDs we found
                      var foundIds = [];
                      for (var i = 0; i < data.networks.length; i++) {
                        foundIds.push(data.networks[i]["{#ADAPTER.ID}"]);
                      }
                      throw "ZBX_UNSUPPORTED: Adapter ID '" + adapterId + "' not found. Found: " + foundIds.join(", ");
                - type: BOOL_TO_DECIMAL
                  parameters:
                    - ''
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
            - uuid: 07890abcdef04234a6789abcdef01234
              name: 'VM Network Adapter {#ADAPTER.NAME} - MAC Address'
              type: DEPENDENT
              key: 'hyperv.vm.network.mac[{#ADAPTER.ID}]'
              delay: '0'
              value_type: TEXT
              trends: '0'
              description: 'MAC address of network adapter {#ADAPTER.NAME} (ID: {#ADAPTER.ID})'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      var data = JSON.parse(value);
                      var adapterId = "{#ADAPTER.ID}";
                      for (var i = 0; i < data.networks.length; i++) {
                        if (data.networks[i]["{#ADAPTER.ID}"] === adapterId) {
                          return data.networks[i]["{#ADAPTER.MAC}"];
                        }
                      }
                      return "";
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
            - uuid: f6789abcdef04123956789abcdef0123
              name: 'VM Network Adapter {#ADAPTER.NAME} - Switch'
              type: DEPENDENT
              key: 'hyperv.vm.network.switch[{#ADAPTER.ID}]'
              delay: '0'
              value_type: TEXT
              trends: '0'
              description: 'Virtual switch of network adapter {#ADAPTER.NAME} (ID: {#ADAPTER.ID})'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      var data = JSON.parse(value);
                      var adapterId = "{#ADAPTER.ID}";
                      for (var i = 0; i < data.networks.length; i++) {
                        if (data.networks[i]["{#ADAPTER.ID}"] === adapterId) {
                          return data.networks[i]["{#ADAPTER.SWITCH}"];
                        }
                      }
                      return "";
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
            - uuid: 18901bcdef014345b789abcdef012345
              name: 'VM Network Adapter {#ADAPTER.NAME} - VLAN'
              type: DEPENDENT
              key: 'hyperv.vm.network.vlan[{#ADAPTER.ID}]'
              delay: '0'
              description: 'VLAN ID of network adapter {#ADAPTER.NAME} (ID: {#ADAPTER.ID})'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      var data = JSON.parse(value);
                      var adapterId = "{#ADAPTER.ID}";
                      for (var i = 0; i < data.networks.length; i++) {
                        if (data.networks[i]["{#ADAPTER.ID}"] === adapterId) {
                          return data.networks[i]["{#ADAPTER.VLAN}"];
                        }
                      }
                      return "0";
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
            - uuid: 47890123bcde40129456789abc012349
              name: 'VM Network Adapter {#ADAPTER.NAME} - Bytes Received/sec'
              key: 'perf_counter_en["\Hyper-V Virtual Network Adapter({#ADAPTER.NAME})\Bytes Received/sec"]'
              delay: 1m
              value_type: FLOAT
              units: Bps
              description: 'Network receive throughput for adapter {#ADAPTER.NAME} (ID: {#ADAPTER.ID})'
              timeout: 30s
            - uuid: 58901234cdef41239567890abc01234a
              name: 'VM Network Adapter {#ADAPTER.NAME} - Bytes Sent/sec'
              key: 'perf_counter_en["\Hyper-V Virtual Network Adapter({#ADAPTER.NAME})\Bytes Sent/sec"]'
              delay: 1m
              value_type: FLOAT
              units: Bps
              description: 'Network send throughput for adapter {#ADAPTER.NAME} (ID: {#ADAPTER.ID})'
              timeout: 30s
            - uuid: 69012345def042349678901abc01234b
              name: 'VM Network Adapter {#ADAPTER.NAME} - Packets Received/sec'
              key: 'perf_counter_en["\Hyper-V Virtual Network Adapter({#ADAPTER.NAME})\Packets Received/sec"]'
              delay: 1m
              value_type: FLOAT
              units: pps
              description: 'Network receive packet rate for adapter {#ADAPTER.NAME} (ID: {#ADAPTER.ID})'
              timeout: 30s
            - uuid: 70123456ef0143459789012abc01234c
              name: 'VM Network Adapter {#ADAPTER.NAME} - Packets Sent/sec'
              key: 'perf_counter_en["\Hyper-V Virtual Network Adapter({#ADAPTER.NAME})\Packets Sent/sec"]'
              delay: 1m
              value_type: FLOAT
              units: pps
              description: 'Network send packet rate for adapter {#ADAPTER.NAME} (ID: {#ADAPTER.ID})'
              timeout: 30s
            - uuid: 81234567f01244569890123abc01234d
              name: 'VM Network Adapter {#ADAPTER.NAME} - Packets Received Errors'
              key: 'perf_counter_en["\Hyper-V Virtual Network Adapter({#ADAPTER.NAME})\Packets Received Errors"]'
              delay: 1m
              value_type: FLOAT
              units: ''
              description: 'Network receive errors for adapter {#ADAPTER.NAME} (ID: {#ADAPTER.ID})'
              timeout: 30s
            - uuid: 9234567801234567a901234abc01234e
              name: 'VM Network Adapter {#ADAPTER.NAME} - Packets Outbound Errors'
              key: 'perf_counter_en["\Hyper-V Virtual Network Adapter({#ADAPTER.NAME})\Packets Outbound Errors"]'
              delay: 1m
              value_type: FLOAT
              units: ''
              description: 'Network send errors for adapter {#ADAPTER.NAME} (ID: {#ADAPTER.ID})'
              timeout: 30s
          master_item:
            key: 'hyperv.discovery.vmdetails[{$VM.ID}]'
          lld_macro_paths:
            - lld_macro: '{#ADAPTER.CONNECTED}'
              path: '$["{#ADAPTER.CONNECTED}"]'
            - lld_macro: '{#ADAPTER.DHCP.GUARD}'
              path: '$["{#ADAPTER.DHCP.GUARD}"]'
            - lld_macro: '{#ADAPTER.DYNAMIC.MAC}'
              path: '$["{#ADAPTER.DYNAMIC.MAC}"]'
            - lld_macro: '{#ADAPTER.ID}'
              path: '$["{#ADAPTER.ID}"]'
            - lld_macro: '{#ADAPTER.IEEE.PRIORITY}'
              path: '$["{#ADAPTER.IEEE.PRIORITY}"]'
            - lld_macro: '{#ADAPTER.IS.LEGACY}'
              path: '$["{#ADAPTER.IS.LEGACY}"]'
            - lld_macro: '{#ADAPTER.MAC.SPOOFING}'
              path: '$["{#ADAPTER.MAC.SPOOFING}"]'
            - lld_macro: '{#ADAPTER.MAC}'
              path: '$["{#ADAPTER.MAC}"]'
            - lld_macro: '{#ADAPTER.NAME.TRANSLATED}'
              path: '$["{#ADAPTER.NAME.TRANSLATED}"]'
            - lld_macro: '{#ADAPTER.NAME}'
              path: '$["{#ADAPTER.NAME}"]'
            - lld_macro: '{#ADAPTER.PACKET.DIRECT}'
              path: '$["{#ADAPTER.PACKET.DIRECT}"]'
            - lld_macro: '{#ADAPTER.PORT.MIRRORING}'
              path: '$["{#ADAPTER.PORT.MIRRORING}"]'
            - lld_macro: '{#ADAPTER.SR.IOV}'
              path: '$["{#ADAPTER.SR.IOV}"]'
            - lld_macro: '{#ADAPTER.SWITCH}'
              path: '$["{#ADAPTER.SWITCH}"]'
            - lld_macro: '{#ADAPTER.VLAN}'
              path: '$["{#ADAPTER.VLAN}"]'
            - lld_macro: '{#ADAPTER.VM.QUEUE}'
              path: '$["{#ADAPTER.VM.QUEUE}"]'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$["networks"]'
      tags:
        - tag: class
          value: software
        - tag: target
          value: hyperv
        - tag: target
          value: hyperv-client
